{"version":3,"file":"static/js/115.8a24fe1d.chunk.js","mappings":"mTAIMA,E,MAAWC,GAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QALW,sCASFC,EAAS,mCAAG,sGACAL,EAASM,IAAT,uBADA,uBACfC,EADe,EACfA,KADe,kBAEhBA,GAFgB,2CAAH,qDAKTC,EAAe,mCAAG,WAAMC,GAAN,yFACNT,EAASM,IAAT,iBAAuBG,IADjB,uBACrBF,EADqB,EACrBA,KADqB,kBAGtBA,GAHsB,2CAAH,sDAMfG,EAAO,mCAAG,WAAMD,GAAN,yFACET,EAASM,IAAT,iBAAuBG,EAAvB,aADF,uBACbF,EADa,EACbA,KADa,kBAGdA,GAHc,2CAAH,sDAMPI,EAAU,mCAAG,WAAMF,GAAN,yFACDT,EAASM,IAAT,iBAAuBG,EAAvB,aADC,uBAChBF,EADgB,EAChBA,KADgB,kBAGjBA,GAHiB,2CAAH,sDAKVK,EAAS,mCAAG,WAAMC,GAAN,yFACAb,EAASM,IAAT,gBAA8B,CACnDH,OAAQ,CAAEU,MAAAA,KAFW,uBACfN,EADe,EACfA,KADe,kBAIhBA,GAJgB,2CAAH,qD,wHCuBtB,UAnDe,WACX,OAA4BO,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KAEA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KACA,GAA0BN,EAAAA,EAAAA,UAAS,MAAnC,eAAOO,EAAP,KAAcC,EAAd,KAEA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAeF,EAAalB,IAAI,UAGtCqB,EAAAA,EAAAA,YAAU,WAEN,IAAMC,EAAW,mCAAG,sGAEZR,GAAW,GAFC,UAGcR,EAAAA,EAAAA,IAAUc,GAHxB,gBAGJG,EAHI,EAGJA,QACRX,EAASW,GAJG,gDAMZP,EAAS,EAAD,IANI,yBAQZF,GAAW,GARC,4EAAH,qDAWbM,GACAE,GAEP,GAAE,CAACF,IAWJ,OACI,2BACKP,IAAW,wCACZ,kBAAMW,SARO,SAACC,GAClBA,EAAEC,iBACFP,EAAiB,CAACZ,MAAOE,IACzBC,EAAU,GACb,EAIO,WACA,kBAAQiB,MAAOlB,EAAQmB,SAbV,SAACH,GAClB,IAASE,EAAUF,EAAEI,OAAZF,MACTjB,EAAUiB,EACb,EAUsDG,UAAQ,KACnD,uCACHnB,EAAMoB,OAAS,IAAK,SAAC,IAAD,CAAYpB,MAAOA,IACvCI,IAAS,sDAIrB,C,uDCnDKiB,EAAa,SAAC,GAAe,IAAbrB,EAAY,EAAZA,MACZsB,GAAWC,EAAAA,EAAAA,MACXC,EAAWxB,EAAMyB,KAAI,gBAAGjC,EAAH,EAAGA,GAAIkC,EAAP,EAAOA,MAAP,OACvB,yBACA,SAAC,KAAD,CAAMC,MAAO,CAACC,KAAMN,GAAWO,GAAE,kBAAarC,GAA9C,SAAqDkC,KAD5ClC,EADc,IAI3B,OAAO,wBAAMgC,GAChB,EAED,MAEAH,EAAWS,aAAe,CACtB9B,MAAO,G","sources":["api/api.js","components/Movies/Movies.jsx","components/MoviesList/MoviesList.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst apiKey = '4242358c052cb34e9586769939c4f84d';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: apiKey,\n  },\n});\n\nexport const getMovies = async () => {\n  const { data } = await instance.get(`/trending/movie/day`);\n  return data;\n};\n\nexport const getSingleMovies = async id => {\n  const { data } = await instance.get(`/movie/${id}`);\n\n  return data;\n};\n\nexport const getCast = async id => {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n\n  return data;\n};\n\nexport const getReviews = async id => {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n\n  return data;\n};\nexport const getSearch = async query => {\n  const { data } = await instance.get(`/search/movie`, {\n    params: { query },\n  });\n  return data;\n};\n","import { useState, useEffect } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { getSearch} from \"api/api\";\nimport MoviesList from \"components/MoviesList/MoviesList\";\n\nconst Movies = () => {\n    const [search, setSearch] = useState('');\n    // const [query, setQuery] = useState('');\n    const [items, setItems] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n  \n    const [searchParams, setSearchParams] = useSearchParams();\n    const searchMovies = searchParams.get(\"query\");\n    \n\n    useEffect(() => {\n  \n        const fetchMovies = async () => {\n            try {\n                setLoading(true);\n                const { results } = await getSearch(searchMovies);\n                setItems(results);\n            } catch (error) {\n                setError(error);\n            } finally {\n                setLoading(false);\n            }\n        };\n        if (searchMovies) {\n            fetchMovies();\n        }\n    }, [searchMovies])\n    \n    const handleChange = (e) => {\n        const {  value } = e.target;\n        setSearch(value);\n    };\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        setSearchParams( {query: search} );\n        setSearch(\"\")\n    };\n    return (\n        <div>\n            {loading && <p>... Loading</p>}\n            <form onSubmit={handleSubmit}>\n            <input  value={search} onChange={handleChange} required/>\n                <button>Search</button>\n            {items.length > 0 && <MoviesList items={items} />}\n            {error && <p>...Movies load failed</p>}\n            </form>\n        </div>\n    )\n}\n\nexport default Movies;","import { Link, useLocation } from \"react-router-dom\";\n\n\nconst MoviesList = ({ items }) => {\n    const location = useLocation();\n    const elements = items.map(({ id, title }) =>\n        <li key={id}>\n        <Link state={{from: location}} to={`/movies/${id}`}>{title}</Link>\n    </li>)\n    return <ul>{ elements}</ul>\n}\n\nexport default MoviesList;\n\nMoviesList.defaultProps = {\n    items: []\n};"],"names":["instance","axios","baseURL","params","api_key","getMovies","get","data","getSingleMovies","id","getCast","getReviews","getSearch","query","useState","search","setSearch","items","setItems","loading","setLoading","error","setError","useSearchParams","searchParams","setSearchParams","searchMovies","useEffect","fetchMovies","results","onSubmit","e","preventDefault","value","onChange","target","required","length","MoviesList","location","useLocation","elements","map","title","state","from","to","defaultProps"],"sourceRoot":""}